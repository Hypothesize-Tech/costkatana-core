name: Auto Release on Push

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'CHANGELOG.md'

jobs:
  auto-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.AI_GITHUB_TOKEN }}
        ssh-strict: false
    
    - name: Use Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install GitHub CLI
      run: |
        type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt-get update
        sudo apt-get install gh -y
    
    - name: Verify GitHub token
      run: |
        if [ -n "${{ secrets.AI_GITHUB_TOKEN }}" ]; then
          echo "AI_GITHUB_TOKEN is available"
          # Test token with GitHub API
          if curl -H "Authorization: token ${{ secrets.AI_GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/user 2>/dev/null | grep -q "login"; then
            echo "✅ GitHub token is valid"
          else
            echo "❌ GitHub token is invalid or has insufficient permissions"
            echo "Please check that your AI_GITHUB_TOKEN has the following permissions:"
            echo "- Contents: Write"
            echo "- Metadata: Read"
            echo "- Actions: Write"
            exit 1
          fi
        else
          echo "AI_GITHUB_TOKEN is not available"
          exit 1
        fi
    
    - name: Run tests
      run: npm test
    
    - name: Run linting
      run: npm run lint
    
    - name: Build package
      run: npm run build
    
    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
    
    - name: Calculate new version
      id: new_version
      run: |
        CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
        
        # Split version into components
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR="${VERSION_PARTS[0]}"
        MINOR="${VERSION_PARTS[1]}"
        PATCH="${VERSION_PARTS[2]}"
        
        # Always bump patch version for auto-releases
        NEW_MAJOR=$MAJOR
        NEW_MINOR=$MINOR
        NEW_PATCH=$((PATCH + 1))
        
        NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
    
    - name: Update version in package.json
      run: |
        npm version ${{ steps.new_version.outputs.new_version }} --no-git-tag-version
        echo "Updated package.json version to ${{ steps.new_version.outputs.new_version }}"
    
    - name: Verify npm token
      run: |
        if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
          echo "NPM_TOKEN is available"
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          
          # Test token with a simple API call instead of npm whoami
          echo "Testing npm token..."
          if curl -H "Authorization: Bearer ${{ secrets.NPM_TOKEN }}" \
                  -H "Accept: application/json" \
                  https://registry.npmjs.org/-/whoami 2>/dev/null | grep -q "username"; then
            echo "✅ NPM token is valid"
          else
            echo "❌ NPM token is invalid or has insufficient permissions"
            echo "Please check that your NPM_TOKEN has the following permissions:"
            echo "- Read packages"
            echo "- Publish packages"
            exit 1
          fi
        else
          echo "NPM_TOKEN is not available"
          exit 1
        fi
    
    - name: Publish to npm
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
        echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
        
        # Check if package exists and we have access
        echo "Checking package access..."
        
        # Check if package exists on npm
        PACKAGE_EXISTS=$(curl -s https://registry.npmjs.org/ai-cost-tracker | grep -c "error" || echo "0")
        
        if [ "$PACKAGE_EXISTS" -eq 0 ]; then
          echo "✅ Package 'ai-cost-tracker' exists on npm"
          
          # Check if we have access to publish
          if curl -H "Authorization: Bearer ${{ secrets.NPM_TOKEN }}" \
                  -H "Accept: application/json" \
                  https://registry.npmjs.org/ai-cost-tracker 2>/dev/null | grep -q "error"; then
            echo "❌ No access to publish to 'ai-cost-tracker'"
            echo "Please check:"
            echo "1. NPM_TOKEN has publish permissions"
            echo "2. You own the package or have publish access"
            exit 1
          fi
        else
          echo "ℹ️ Package 'ai-cost-tracker' does not exist yet - will create new package"
        fi
        
        # Try to publish
        if npm publish --access public --registry=https://registry.npmjs.org/; then
          echo "✅ Successfully published ai-cost-tracker@${{ steps.new_version.outputs.new_version }} to npm"
        else
          echo "❌ Failed to publish to npm"
          echo "Please check your NPM_TOKEN permissions"
          exit 1
        fi
    
    - name: Create and push tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Configure git to use the token for authentication
        git remote set-url origin https://x-access-token:${{ secrets.AI_GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        
        # Verify the remote URL is set correctly
        echo "Remote URL: $(git remote get-url origin)"
        
        # Add and commit changes
        git add package.json
        git commit -m "Auto-release: Bump version to ${{ steps.new_version.outputs.new_version }}"
        
        # Create tag
        git tag -a "v${{ steps.new_version.outputs.new_version }}" -m "Auto-release version ${{ steps.new_version.outputs.new_version }}"
        
        # Push with explicit authentication
        echo "Pushing commit to ${{ github.ref }}..."
        
        # Try direct git push first
        if git push origin HEAD:${{ github.ref }}; then
          echo "✅ Successfully pushed commit"
        else
          echo "Git push failed, trying with GitHub CLI..."
          echo "${{ secrets.AI_GITHUB_TOKEN }}" | gh auth login --with-token
          
          # Try again with GitHub CLI authentication
          if git push origin HEAD:${{ github.ref }}; then
            echo "✅ Successfully pushed commit with GitHub CLI"
          else
            echo "❌ Failed to push commit even with GitHub CLI"
            echo "Please check:"
            echo "1. AI_GITHUB_TOKEN has 'Contents: Write' permission"
            echo "2. Token is valid and not expired"
            echo "3. You have write access to the repository"
            exit 1
          fi
        fi
        
        echo "Pushing tag v${{ steps.new_version.outputs.new_version }}..."
        
        # Try direct git push for tag
        if git push origin "v${{ steps.new_version.outputs.new_version }}"; then
          echo "✅ Successfully pushed tag"
        else
          echo "Tag push failed, trying with GitHub CLI..."
          echo "${{ secrets.AI_GITHUB_TOKEN }}" | gh auth login --with-token
          
          # Try again with GitHub CLI authentication
          if git push origin "v${{ steps.new_version.outputs.new_version }}"; then
            echo "✅ Successfully pushed tag with GitHub CLI"
          else
            echo "❌ Failed to push tag even with GitHub CLI"
            echo "Please check:"
            echo "1. AI_GITHUB_TOKEN has 'Contents: Write' permission"
            echo "2. Token is valid and not expired"
            echo "3. You have write access to the repository"
            exit 1
          fi
        fi
        
        echo "✅ Successfully pushed commit and tag"
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        AI_GITHUB_TOKEN: ${{ secrets.AI_GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.new_version.outputs.new_version }}
        release_name: Auto-release v${{ steps.new_version.outputs.new_version }}
        body: |
          ## Auto-release v${{ steps.new_version.outputs.new_version }}
          
          This is an automatic release triggered by changes to the main branch.
          
          ### Installation
          ```bash
          npm install ai-cost-tracker@${{ steps.new_version.outputs.new_version }}
          ```
          
          ### Changes
          - Automatic version bump and release
          - Updated dependencies and improvements
          - Enhanced TypeScript definitions
          - Better error handling
        draft: false
        prerelease: false 